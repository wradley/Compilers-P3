/**********************************************************************
 Java CUP specification for a parser for cimple programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) 
 *
 * NOTE: You will need to make changes here.
 */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal LinkedList	      varDeclList;
non terminal VarDeclNode      varDecl;
non terminal FnDeclNode	      fnDecl;
non terminal StructDeclNode   structDecl;
non terminal LinkedList       structBody;
non terminal FormalsListNode  formals;
non terminal LinkedList	      formalsList;
non terminal FormalDeclNode   formalDecl;
non terminal FnBodyNode	      fnBody;
non terminal LinkedList	      stmtList;
non terminal StmtNode         stmt;
non terminal AssignNode       assignExp;
non terminal ExpNode          exp;
non terminal ExpNode          term;
non terminal CallExpNode      fncall;
non terminal LinkedList	      actualList;
non terminal TypeNode         type;
non terminal ExpNode	      loc;
non terminal IdNode           id;
 
 
/* NOTE: Add precedence and associativity declarations here */

//precedence left DOT;
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc GREATER, LESS, GREATEREQ, LESSEQ, EQUALS, NOTEQUALS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left NOT;
start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
		            | fnDecl:f
		            {: RESULT = f;
		            :}
		            | structDecl:s
		            {: RESULT = s;
		            :}
                ;

varDeclList     ::= varDeclList:vl varDecl:v
		            {: vl.addLast(v);
		              RESULT = vl;
		            :}
                | /* epsilon */
		            {: LinkedList<VarDeclNode> varList = new LinkedList<VarDeclNode>();
		              RESULT = varList;
		            :}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
		            | STRUCT id:structId id:varId SEMICOLON
		            {: RESULT = new VarDeclNode(new StructNode(structId), varId, 0);
		            :}
                ;

fnDecl          ::= type:t id:i formals:f fnBody:fb
		            {: RESULT = new FnDeclNode(t, i, f, fb);
		            :}
                ;

structDecl	::= STRUCT id:i LCURLY structBody:sb RCURLY SEMICOLON
		            {: RESULT = new StructDeclNode(i, new DeclListNode(sb));
		            :}
		            ;

structBody	::= structBody:sBody varDecl:v
		            {: sBody.addLast(v);
		              RESULT = sBody;
		            :}
		            | varDecl:v
		            {: LinkedList<DeclNode> sBody = new LinkedList<DeclNode>();
		               sBody.add(v);
		               RESULT = sBody;
		            :} 
		            ;

formals         ::= LPAREN RPAREN
		            {: RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
		            :}
                  | LPAREN formalsList:fl RPAREN
		            {: RESULT = new FormalsListNode(fl);
		            :}
                ;

formalsList     ::= formalDecl:fd
		            {: LinkedList<FormalDeclNode> dList = new LinkedList<FormalDeclNode>();
		              dList.add(fd);
		              RESULT = dList;
		            :} 
                | formalDecl:fd COMMA formalsList:dList
		            {: dList.addLast(fd);
		              RESULT = dList;
		            :}
                ;

formalDecl      ::= type:t id:i        // note: no struct parameters
                {: RESULT = new FormalDeclNode(t, i);
                :}
                ;

fnBody          ::= LCURLY varDeclList:v stmtList:s RCURLY 
                {: RESULT = new FnBodyNode(new DeclListNode(v),new StmtListNode(s));
                :}
                ;

stmtList        ::= stmtList:sl stmt:s
                {:  sl.addLast(s);
                    RESULT = sl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<StmtNode>();
                :}
                ;

stmt            ::= assignExp:ae SEMICOLON
                {:
                    RESULT = new AssignStmtNode(ae);
                :}
                | loc:l PLUSPLUS SEMICOLON
                {:
                    RESULT = new PostIncStmtNode(l);
                :}
                | loc:l MINUSMINUS SEMICOLON
                {:
                    RESULT = new PostDecStmtNode(l);
                :}
                | CIN READ loc:l SEMICOLON
                {:
                    RESULT = new ReadStmtNode(l);
                :}
                | COUT WRITE exp:e SEMICOLON
                {:
                    RESULT = new WriteStmtNode(e);
                :}
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:vList stmtList:sList RCURLY
                {:
                    RESULT = new IfStmtNode(e, new DeclListNode(vList), new StmtListNode(sList));
                :}
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:v1 stmtList:s1 RCURLY ELSE LCURLY varDeclList:v2 stmtList:s2 RCURLY
                {:
                    RESULT = new IfElseStmtNode(e, new DeclListNode(v1), new StmtListNode(s1), new DeclListNode(v2), new StmtListNode(s2));
                :}
                | WHILE LPAREN exp:e RPAREN LCURLY varDeclList:vList stmtList:sList RCURLY
                {:
                    RESULT = new WhileStmtNode(e, new DeclListNode(vList), new StmtListNode(sList));
                :}
                | RETURN exp:e SEMICOLON
                {:
                    RESULT = new ReturnStmtNode(e);
                :}
                | RETURN SEMICOLON
                {:
                    RESULT = new ReturnStmtNode(null);
                :}
                | fncall:f SEMICOLON
                {:
                    RESULT = new CallStmtNode(f);
                :}
                ;

assignExp       ::= loc:l ASSIGN exp:e
                {:
                  RESULT = new AssignNode(l, e);
                :}
                ;
                
exp             ::= assignExp: ae
                {:
                  RESULT = ae;
                :}
                | exp:e1 PLUS exp:e2
                {:
                  RESULT = new PlusNode(e1, e2);
                :}
                | exp:e1 MINUS exp:e2
                {:
                  RESULT = new MinusNode(e1, e2);
                :}
                | exp:e1 TIMES exp:e2
                {:
                  RESULT = new TimesNode(e1, e2);
                :}
                | exp:e1 DIVIDE exp:e2
                {:
                  RESULT = new DivideNode(e1, e2);
                :}
                | NOT exp:e
                {:
                  RESULT = new NotNode(e);
                :}
                | exp:e1 AND exp:e2
                {:
                  RESULT = new AndNode(e1, e2);
                :}
                | exp:e1 OR exp:e2
                {:
                  RESULT = new OrNode(e1, e2);
                :}
                | exp:e1 EQUALS exp:e2
                {:
                  RESULT = new EqualsNode(e1, e2);
                :}
                | exp:e1 NOTEQUALS exp:e2
                {:
                  RESULT = new NotEqualsNode(e1, e2);
                :}
                | exp:e1 LESS exp:e2
                {:
                  RESULT = new LessNode(e1, e2);
                :}
                | exp:e1 GREATER exp:e2
                {:
                  RESULT = new GreaterNode(e1, e2);
                :}
                | exp:e1 LESSEQ exp:e2
                {:
                  RESULT = new LessEqNode(e1, e2);
                :}
                | exp:e1 GREATEREQ exp:e2
                {:
                  RESULT = new GreaterEqNode(e1, e2);
                :}
                | MINUS term:t
                {:
                  RESULT = new UnaryMinusNode(t);
                :}
                | term:t
                {:
                  RESULT = t;
                :}
                ;

term            ::= loc:l
                {:
                  RESULT = l;
                :}
                | INTLITERAL:i
                {:
                  RESULT = new IntLitNode(i.linenum, i.charnum, i.intVal);
                :}
                | STRINGLITERAL:s
                {:
                  RESULT = new StringLitNode(s.linenum, s.charnum, s.strVal);
                :}
                | TRUE:t
                {:
                  RESULT = new TrueNode(t.linenum, t.charnum);
                :}
                | FALSE:f
                {:
                  RESULT = new FalseNode(f.linenum, f.charnum);
                :}
                | LPAREN exp:e RPAREN
                {:
                  RESULT = e;
                :}
                | fncall:f
                {:
                  RESULT = f;
                :}
                ;

fncall          ::=  id:i LPAREN RPAREN   // fn call with no args
                {:
                  RESULT = new CallExpNode(i, null);
                :}
                | id:i LPAREN actualList:aList RPAREN  // with args
                {:
                  RESULT = new CallExpNode(i, new ExpListNode(aList));
                :}
                ;

actualList      ::= exp:e
                {:
                  LinkedList<ExpNode> expList = new LinkedList<ExpNode>();
                  expList.add(e);
                  RESULT = expList;
                :}
                | actualList:aList COMMA exp:e
                {:
                  aList.addLast(e);
                  RESULT = aList;
                :}
                ;


type            ::= INT
                {: RESULT = new IntNode();
                :}
                | BOOL
                {: RESULT = new BoolNode();
                }
                | VOID
		            {: RESULT = new VoidNode();
		            :}
                ;

loc		          ::= id:i
		            {: RESULT = i;
		            :} 
		            | loc:l DOT id:i
		            {: RESULT = new DotAccessExpNode(l, i);
		            :}
		            ;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;
				
